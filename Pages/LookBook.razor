@inject NavigationManager Navigation
@inject IJSRuntime JS
@using Models


<div class="relative h-screen w-screen overflow-hidden">
    <!-- Scrollable Media Container -->
    <div id="lookbook" class="flex overflow-x-auto snap-x snap-mandatory h-full w-full touch-pan-y scroll-smooth"
        @onwheel="HandleScroll">
        @for (int i = 0; i < MediaList.Count; i++)
        {
            var transitionBase = "transition-transform transition-opacity duration-700 ease-in-out";
            var isActive = i == CurrentIndex ? "opacity-100 scale-100 z-20" : "opacity-0 scale-95 z-10";
            <div class="@($"flex-shrink-0 w-screen h-screen snap-start transform media-slide {transitionBase} {isActive}")">
                @if (MediaList[i].Type == "image")
                {
                    <img src="@MediaList[i].Source" alt="Lookbook image @i" class="object-cover w-full h-full" />
                }
                else if (MediaList[i].Type == "video")
                {
                    <video src="@MediaList[i].Source" class="object-cover w-full h-full" autoplay muted loop
                        playsinline></video>
                }
            </div>
        }
    </div>

    <!-- Page Indicators -->
    <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-2 z-50">
        @for (int i = 0; i < MediaList.Count; i++)
        {
            var active = i == CurrentIndex
            ? "bg-white w-3 h-3"
            : "bg-white/40 w-2 h-2";
            <div class="@($"rounded-full {active}")"></div>
        }
    </div>

    <!-- Back Button -->
    <button
        class="absolute top-4 left-4 z-50 bg-black/60 text-white px-4 py-2 rounded backdrop-blur-sm hover:bg-black/80"
        @onclick="GoBack">
        ‚Üê Back
    </button>
</div>

@code {
    [Parameter]
    public List<LookBookMedia> MediaList { get; set; } = new();

    private int CurrentIndex = 0;

    private DotNetObjectReference<LookBook>? _dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initializeLookbookInterop", _dotNetRef);
        }
    }

    public async ValueTask DisposeAsync()
    {
        _dotNetRef?.Dispose();
    }

    [JSInvokable]
    public async Task UpdateCurrentSlideAsync()
    {
        CurrentIndex = await JS.InvokeAsync<int>("getCurrentSlideIndex");
        StateHasChanged();
    }

    [JSInvokable]
    public Task ExitLookbook()
    {
        Navigation.NavigateTo("/");
        return Task.CompletedTask;
    }

    private void GoBack() => Navigation.NavigateTo("/");

    private async Task HandleScroll(WheelEventArgs args)
    {
        await UpdateCurrentSlideAsync();
    }
}
